builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello bash
touch questionnaire.sh
echo hello questionnaire
sh questionnaire.sh
bash questionnaire.sh
which bash
./questionnaire.sh
ls --color=auto -l
chmod +x questionnaire.sh
ls --color=auto -l
./questionnaire.sh
./questionnaire
./questionnaire.sh
[ -d "$HOME/bin" ]
[ -d "$HOME/.local/bin" ]
echo -n 769e453c-fb11-4e47-a58a-993865543980
cat /proc/self/environ
echo -n 769e453c-fb11-4e47-a58a-993865543980
[ -d "$HOME/bin" ]
[ -d "$HOME/.local/bin" ]
'/vscode/vscode-server/bin/linux-x64/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/node' -p '"44ab1e28e075" + JSON.stringify(process.env) + "44ab1e28e075"'
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./questionnaire.sh
[ -d "$HOME/bin" ]
[ -d "$HOME/.local/bin" ]
echo -n 2c48b309-0780-4f77-9022-86354291b097
cat /proc/self/environ
echo -n 2c48b309-0780-4f77-9022-86354291b097
[ -d "$HOME/bin" ]
[ -d "$HOME/.local/bin" ]
'/vscode/vscode-server/bin/linux-x64/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/node' -p '"0e89bdcdcdb9" + JSON.stringify(process.env) + "0e89bdcdcdb9"'
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello $NAME
echo Hello$NAME
./questionnaire.sh
./questionnaire.sh
echo "Hello $NAME"
./questionnaire.sh
./questionnaire.sh
sh questionnaire.sh
bash questionnaire.sh
./questionnaire.sh
echo hello bash
sh ./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
echo --help
man echo
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
touch countdown.sh
./countdown.sh
chmod +x countdown.sh
./countdown.sh
./countdown.sh
./countdown.sh arg1 arg2 arg3
./countdown.sh arg1 arg2 arg3
./countdown.sh arg1 arg2 arg3
./countdown.sh arg1 arg2 arg3
help
man if
help if
./countdown.sh arg1
./countdown.sh arg2
./countdown.sh arg2
./countdown.sh 4
./countdown.sh 5
help
help if
help [[expression]]
help [[ expression ]]
help !
help test
./countdown.sh 5
[[ 4 -le 5 ]]
$?
echo $? [[ 4 -le 5 ]]
__vsc_prompt_cmd_original
[[ 4 -le 5 ]]
echo $?
[[ 4 -ge 5 ]]
echo $?
[[ 4 -ge 5 ]]
[[ 4 -ge 5 ]]
help test
[[ 10 -ne 5 ]]
[uhchjchcs]]
bad_command
ls --color=auto
ls --color=auto -y
help test
[[ -a countdown.sh ]]
[[ -a bad_file.txt ]]
[[ -x countdown.sh ]]
[[ -x countdown.sh ]]
help [[ expression ]]
[[ -x countdown.sh && 5 -le 4 ]]
[[ -x countdown.sh || 5 -le 4 ]]
./countdown.sh 1
./countdown.sh 0
help
./countdown.sh 10
help
ls --color=auto /
ls --color=auto /bin
man sleep
sleep 3
./countdown.sh 3
./countdown.sh 3
./countdown.sh 1
help while
./countdown.sh 5
touch bingo.sh
chmod +x countdown.sh
chmod +x bingo.sh
./bingo.sh
printenv
echo $LANG
declare -p
echo $RANDOM
./bingo.sh
./bingo.sh
./bingo.sh
I=0
echo $I
(( I++ ))
echo $I
help let
(( I += 10 ))
echo $I
(( I += 10 ))
$(( I + 4 ))
echo $(( I + 4 ))
echo $I
J=$(( I - 6 ))
echo $J
echo $(( J bingo.sh countdown.sh questionnaire.sh 5 + 25 ))
echo $J
declare -p
declare -p J
declare -p RANDOM
echo $(( RANDOM % 75 ))
echo $(( RANDOM % 75 + 1 ))
./bingo.sh
./bingo.sh
help let
./bingo.sh
./bingo.sh
fortune.sh
touch fortune.sh
chmod +x bingo.sh
chmod +x bingo.sh
chmod +x fortune.sh
chmod +x fortune.sh
./fortune.sh
ARR=("a" "b" "c")
echo ${ARR[1]}
echo ${ARR[@]}
declare -p ARR
echo ${RESPONSES[5]}
./fortune.sh
help
help function
echo ${RESPONSES[$N]}
./fortune.sh
./fortune.sh
help
help until
./fortune.sh
./fortune.sh
help [[ expression ]]
[[ hello == hello ]]
[[ hello == world ]]
[[ hello =~ el ]]
[[ "hello world" =~ "lo wor" ]]
[[ "hello world" =~ ^h ]]
[[ "hello world" =~ ^h.+d$ ]]
VAR="hello world"
echo $VAR
[[ $VAR == "hello world" ]]
[[ $VAR =~ \?$ ]]
[[ test? =~ \?$ ]]
[[ $QUESTION =~ \?$ ]]
./fortune.sh
./fortune.sh
./fortune.sh
touch five.sh
chmod +x five.sh
./five.sh
./five.sh
./five.sh
./five.sh
./five.sh
./five.sh
chmod +x five.sh
./five.sh
./five.sh
./five.sh
./five.sh
./fortune.sh
./fortune.sh
./fortune.sh
git init
git add .
